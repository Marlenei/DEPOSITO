@using System.Web.Optimization
@{
    ViewBag.Title = "Solicitud de Pedidos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="card shadow-sm">
    <div class="card-header bg-primary text-white">
        <h5 class="card-title mb-0">
            <i class="fas fa-box-open me-2"></i>Solicitud de Pedidos
        </h5>
    </div>


    <div class="card-body">
        @if (User.Identity.IsAuthenticated)
        {
            <div class="alert alert-info mb-4">
                <div class="row align-items-center">
                    <div class="col-md-4 mb-2 mb-md-0">
                        <i class="fas fa-user me-2"></i><strong>@User.Identity.Name</strong>
                    </div>
                    <div class="col-md-4 mb-2 mb-md-0">
                        <span class="d-block text-success">@Session["NombreArea"]</span>
                    </div>
                    <div class="col-md-4">
                        <span class="d-block text-success">@Session["NombreSector"]</span>
                    </div>
                </div>
            </div>
        }

       <!-- Contenedor principal para los tres elementos -->
        <div class="row g-2 g-md-3 mb-4 align-items-stretch">

            <!-- Elemento 1: Botón Nuevo Pedido -->
            <div class="col-12 col-md">
                <button type="button" class="btn btn-success w-100 h-100" onclick="abrirModal(null)">
                    <i class="fas fa-plus-circle me-1"></i> Nuevo Pedido
                </button>
            </div>

            <!-- Elemento 2: Buscador de Pedidos -->
            <div class="col-12 col-md">
                <div class="input-group h-100">
                    <input type="text" class="form-control"
                           id="txtBuscarPedido"
                           placeholder="Buscar por N° de Pedido">
                    <button class="btn btn-primary"
                            type="button"
                            onclick="buscarPorNumero()">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>

            <!-- Elemento 3: Botón Ver Mis Pedidos -->
            <div class="col-12 col-md">
                <button class="btn btn-warning w-100 h-100"
                        onclick="mostrarMisPedidos()">
                    <i class="fas fa-clipboard-list me-2"></i>
                    Ver Pedidos Realizados Por Mi
                </button>
            </div>

        </div>

        <!-- NUEVA SECCIÓN PARA EL TÍTULO -->
        <!-- Título dinámico -->
        <div class="row mb-0">
            <div class="col-12 text-center">
                <h4 id="tituloTablaPedidos" class="titulo-dinamico-mejorado" title="Viendo pedidos de mi área">
                    <i id="iconoTitulo" class="fas fa-users me-2"></i> 
                    <span id="textoTitulo">PEDIDOS DE MI ÁREA</span>
                </h4>
            </div>
        </div>
        <!-- FIN DE LA NUEVA SECCIÓN PARA EL TÍTULO -->

        <div class="table-responsive">
            <table id="tabla" class="table table-striped-columns table-hover table-bordered" style="width: 100% !important; table-layout: fixed;">
                <thead class="table-dark">
                    <tr>
                        <th></th>
                        <th>Producto</th>
                        <th>Cant. Pedida</th>
                        <th>Cant. Entregada</th>
                        <th>Fecha Entrega</th>
                        <th>N° Pedido</th>
                        <th>Visado</th>
                        <th>Acciones</th>

                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="FormModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <!-- SIN modal-dialog-scrollable -->
        <div class="modal-content">
            <div class="modal-header bg-dark text-white py-2">
                <h1 class="modal-title fs-5" id="titulodinamico">Detalles del Pedido</h1>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body py-3">
                <input id="txtid" type="hidden" value="0" />
                <input type="hidden" id="txtusuarioId" value="@Session["AccesCode"]" readonly>

                <!-- SECCIÓN 1: Información General del Pedido y Usuario -->
                <fieldset class="mb-3 border p-2">
                    <legend class="w-auto px-2" style="font-size: 0.9rem; font-weight: 600;">Información General</legend>
                    <div class="row g-2">
                        <div class="col-md-3">
                            <label class="form-label-sm">Usuario:</label>
                            <input type="text" class="form-control form-control-sm" id="txtusuarioNombre" value="@User.Identity.Name" readonly>
                        </div>

                        @*<div class="col-md-3">
                            <label for="txtpedido" class="form-label-sm">N° de Pedido:</label>
                            <input type="text" class="form-control form-control-sm" id="txtpedido" placeholder="Autogenerado" readonly>
                        </div>*@

                        <div class="col-md-3">
                            <label for="txtfechapedido" class="form-label-sm">Fecha Pedido:</label>
                            <input type="text" class="form-control form-control-sm" id="txtfechapedido" readonly>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label-sm">Área:</label>
                            <input type="text" class="form-control form-control-sm" id="txtArea" value="@Session["NombreArea"]" readonly>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label-sm">Sector:</label>
                            <input type="text" class="form-control form-control-sm" id="txtSector" value="@Session["NombreSector"]" readonly>
                        </div>
                    </div>
                </fieldset>

                <!-- SECCIÓN 2: Agregar/Editar Productos -->
                <div class="row g-3">
                    <!-- Columna Izquierda: Selección y Detalles del Producto (para Nuevo y Editar) -->
                    <!-- LE DAMOS UN ID AL FIELDSET -->
                    <div class="col-lg-5" id="columnaProductoIndividual">
                        <fieldset class="border p-2 h-100">
                            <!-- Cambiamos la leyenda dinámicamente -->
                            <legend id="leyendaProductoIndividual" class="w-auto px-2" style="font-size: 0.9rem; font-weight: 600;">Agregar Producto</legend>

                            <!-- DAMOS ID a la sección de búsqueda para ocultarla al editar -->
                            <div class="mb-2" id="seccionBusquedaAvanzada">
                                <label class="form-label-sm fw-bold d-block">Buscar Producto (Opcional)</label>
                                <div class="border rounded p-2 bg-light">
                                    @Html.Partial("_BusquedaAvan")
                                </div>
                            </div>

                            <div class="mb-2">
                                <label for="cbodetalle" class="form-label-sm">Producto:</label>
                                <!-- El select se poblará y se seleccionará/deshabilitará en JS -->
                                <select id="cbodetalle" class="form-select form-select-sm ProductosS" style="width: 100%"></select>
                            </div>

                            <div class="row g-2 mb-2">
                                <div class="col-6">
                                    <label for="txtcantidad" class="form-label-sm">Cantidad:</label>
                                    <input type="number" class="form-control form-control-sm" id="txtcantidad" min="1" value="1" required>
                                </div>
                               
                            </div>

                            <div class="mb-2">
                                <label for="txtobservaciones" class="form-label-sm">Observaciones (Producto):</label>
                                <input type="text" class="form-control form-control-sm" id="txtobservaciones" maxlength="50" placeholder="Opcional">
                            </div>

                            <p class="mb-1 mt-2 text-muted" style="font-size:0.8em;">Info. adicional del producto seleccionado:</p>
                            <div class="row g-2 mb-2">
                                <div class="col-sm-4">
                                    <label class="form-label-sm">Código ID:</label>
                                    <input id="infocodigoid" type="text" class="form-control form-control-sm" readonly>
                                </div>
                                <div class="col-sm-4">
                                    <label class="form-label-sm">Rubro:</label>
                                    <input id="inforubro" type="text" class="form-control form-control-sm" readonly>
                                </div>
                                <div class="col-sm-4">
                                    <label class="form-label-sm">Tipo:</label>
                                    <input id="infotipo" type="text" class="form-control form-control-sm" readonly>
                                </div>
                                @* Agregamos el Stock aquí si quieres mostrarlo siempre *@
                                <!--<div class="col-sm-4">
                                    <label class="form-label-sm">Stock Actual:</label>
                                    <input id="cbostockactual" type="text" class="form-control form-control-sm" readonly>
                                </div>-->
                            </div>

                            <!-- OCULTAREMOS ESTE BOTÓN AL EDITAR -->
                            <button type="button" id="btnAgregar" class="btn btn-primary btn-sm w-100 mt-2">
                                <i class="fas fa-plus-circle me-1"></i> AGREGAR PRODUCTO
                            </button>
                        </fieldset>
                    </div>

                    <!-- Columna Derecha: Lista de Productos Agregados (SOLO PARA NUEVO) -->
                    <!-- LE DAMOS UN ID PARA OCULTARLA AL EDITAR -->
                    <div class="col-lg-7" id="columnaListaProductos">
                        <fieldset class="border p-2 h-100">
                            <legend class="w-auto px-2" style="font-size: 0.9rem; font-weight: 600;">Productos en este Pedido</legend>
                            <span id="contadorProductos" class="form-text d-block mb-1">Productos agregados: 0</span>

                            <div id="seccionProductos" class="mt-1">
                                <table class="table table-bordered table-sm" id="tablaProductos">
                                    <!-- ... thead ... -->
                                    <tbody></tbody>
                                </table>
                            </div>
                            <div id="mensajeVacioProductos" class="alert alert-secondary alert-sm mt-2 py-1" role="alert" style="display: block;">
                                Aún no se han agregado productos.
                            </div>
                        </fieldset>
                    </div>
                </div>

                <!-- Mensaje de Error General -->
                <div class="row mt-2">
                    <div class="col-12">
                        <div id="mensajeError" class="alert alert-danger alert-sm d-none py-1" role="alert"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer py-2">
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary btn-sm btn-guardar" id="btnGuardar">
                    <i class="fas fa-save me-1"></i> Guardar Pedido
                </button>
                <button class="btn btn-info btn-sm" onclick="imprimirPedido()" id="btnImprimir" disabled>
                    <i class="fas fa-print me-2"></i> Imprimir
                </button>
            </div>
        </div>
    </div>
</div>
<style>

    /* --- Estilos para Modal  --- */

    
    #FormModal .form-label,
    #FormModal .form-label-sm { /* Asegurar que se aplique si usas la clase */
        font-size: 0.875em;
        margin-bottom: 0.2rem; /* Reducir margen inferior de etiquetas */
    }

    #FormModal fieldset {
        min-width: 0; /* Necesario para fieldsets en flex/grid para evitar desbordamientos */
    }

    /* Ajustes para Select2 si usas controles -sm */
    #FormModal .select2-container .select2-selection--single {
        height: calc(1.5em + 0.5rem + 2px) !important; /* Altura de form-control-sm */
        padding: 0.25rem 0.5rem !important; /* Padding de form-control-sm */
        font-size: .875rem !important; /* font-size de form-control-sm */
        line-height: 1.5 !important;
    }

        #FormModal .select2-container .select2-selection--single .select2-selection__rendered {
            line-height: calc(1.5em + 0.5rem - (0.25rem * 2)) !important; /* Ajustar línea de texto */
            padding-left: 0 !important; /* Select2 suele añadir su propio padding */
        }

    #FormModal .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: calc(1.5em + 0.5rem) !important; /* Ajustar flecha */
        top: 1px !important;
    }

    /* Para que el dropdown de Select2 se vea sobre el modal */
    .select2-dropdown {
        z-index: 1061 !important; /* Bootstrap modal z-index es 1050/1055, backdrop 1060 si es static */
    }

    .titulo-dinamico-mejorado {
        display: inline-flex; /* Para alinear icono y texto, y permitir padding */
        align-items: center; /* Centra verticalmente el icono y el texto */
        padding: 10px 20px; 
        border-radius: 25px; 
        font-weight: bold;
        transition: all 0.3s ease-in-out; /* Transición suave para todos los cambios */
        color: #0d6efd; /* Color primario de Bootstrap por defecto */
        border: 2px solid transparent; /* Borde inicial transparente, se activará cuando sea clickable */
        background-color: #e7f0fe; /* Un fondo azul muy suave para el estado base (cuando NO es clickable) */
        cursor: default; /* Cursor por defecto cuando no es clickable */
    }

        /* Estilo cuando el título ES clickable (es decir, no está mostrando "PEDIDOS DE MI ÁREA") */
        .titulo-dinamico-mejorado.clickable {
            cursor: pointer;
            border-color: #0d6efd; /* Borde del color primario */
            background-color: #fff; /* Fondo blanco para destacar que es accionable */
            color: #0d6efd; /* Mantenemos el color del texto primario */
        }

            .titulo-dinamico-mejorado.clickable:hover {
                background-color: #0d6efd; /* Fondo primario al pasar el mouse */
                color: white; /* Texto blanco para contraste */
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Sombra sutil para efecto de elevación */
                transform: translateY(-2px); /* Efecto ligero de elevación */
                /* text-decoration: none; No es necesario si no lo tenía antes */
            }

                /* Asegura que el ícono también cambie de color con el hover cuando es clickable */
                .titulo-dinamico-mejorado.clickable:hover i {
                    color: white;
                }

        .titulo-dinamico-mejorado i {
            transition: color 0.3s ease-in-out; /* Para que el color del icono también transicione */
            font-size: 1.1em; /* Un poco más grande el ícono */
        }
</style>

@section scripts{

    <script>
        // Configuración Inicial
        var tabladata;
        var filaSeleccionada;
        var urlPedidosArea = '@Url.Action("ListarPendientesPorArea", "SolicitudPedidos")';
        var urlMisPedidos = '@Url.Action("Listar", "SolicitudPedidos")'; // URL para tus pedidos
        var tituloArea = "PEDIDOS DE MI ÁREA";
        var tituloMisPedidos = "MIS PEDIDOS REALIZADOS";
        var tituloBusqueda = "RESULTADOS DE BÚSQUEDA";
        var codigoidprod = {};
        var stockprod = {};
        var rubroprod = {};
        var tipoprod = {};
        var appSettings = {};
        var permisos = @Html.Raw(Json.Encode(Session["PermissionsCode"]));

        let productoSeleccionado = null;
        var productosAgregados = [];

        // --- Variables para el Título Dinámico Mejorado ---
        var iconoArea = "fas fa-users";
        var iconoMisPedidos = "fas fa-user-check";
        var iconoBusqueda = "fas fa-search";

        var $tituloContainer, $textoTituloEl, $iconoTituloEl;



        // --- Función para actualizar el estilo del Título Dinámico ---
        function actualizarEstiloTitulo(texto, iconoClase, esClickable) {
            if (!$textoTituloEl || !$iconoTituloEl || !$tituloContainer) {
                console.error("Elementos del DOM para el título no están disponibles. Asegúrate de que $tituloContainer, $textoTituloEl, y $iconoTituloEl están definidos y cacheados.");
                // Fallback para el texto si solo el contenedor principal está disponible.
                if ($tituloContainer) $tituloContainer.text(texto); // Comportamiento antiguo si los hijos no están.
                return;
            }

            $textoTituloEl.text(texto);
            $iconoTituloEl.removeClass().addClass(iconoClase + ' me-2'); // Actualiza clase del ícono

            if (esClickable) {
                $tituloContainer.addClass('clickable');
                $tituloContainer.attr('title', 'Volver a Pedidos de mi Área');
            } else {
                $tituloContainer.removeClass('clickable');
                // Actualizar el title para reflejar el estado actual
                $tituloContainer.attr('title', 'Viendo ' + texto.toLowerCase());
            }
        }


        $(document).ready(function () {

            $tituloContainer = $('#tituloTablaPedidos');
            $textoTituloEl = $('#textoTitulo'); // Asegúrate que tu HTML tiene <span id="textoTitulo">
            $iconoTituloEl = $('#iconoTitulo');
            inicializarDataTable();

             var urlrubros = '@Url.Action("ListarRubros", "Toner")'
             CargarRubros(urlrubros, permisos.map(p => p.Accesos));

             var urlcodigoid = '@Url.Action("ListarProductos", "Toner")'
            CargarCodigosID(urlcodigoid, permisos.map(p => p.Accesos));
            LimpiarSelects();
            CargarProductos(permisos.map(p => p.Accesos));
            LimpiarCampos();
            selects2();
            cargarApiUrls();
            $('#btnGuardar').click(Guardar);
            editar();

            $('#btnAgregar').click(function () {
                agregarProducto();


            });

            $tituloContainer.on('click', function () {
                if ($(this).hasClass('clickable')) {
                    mostrarPedidosArea(); // mostrarPedidosArea se encargará de actualizar el título
                }
            });

        });




        $('#StockDatos').on('input', function () {
            var inputVal = $(this).val();
            var selectedOption = $('#cbodetalle option').filter(function () {
                return $(this).text() === inputVal;
            });
            var stockActual = stockprod[idProducto];

            if (selectedOption.length) {

                if (stockActual !== undefined) {  // <- Faltaba 'undefined'
                    $("#cbostockactual").val(stockActual).show();
                } else {
                    $("#cbostockactual").val("").hide();
                }
                $("#txtidProducto").val(idProducto);
            }
        });





               function agregarProducto() {
            var idProducto = $("#cbodetalle").val();
            var productoTexto = $("#cbodetalle option:selected").text();
            var cantidad = parseInt($("#txtcantidad").val());
            var observaciones = $("#txtobservaciones").val();

            if (!idProducto || cantidad <= 0) {
                mostrarError("¡Seleccione un producto y asegúrese de que la cantidad sea mayor que 0!");
                return;
            }

            // --- INICIO DE LA VERIFICACIÓN DE PRODUCTO DUPLICADO ---
            const productoYaAgregado = productosAgregados.find(p => p.oProductos.IdProducto === idProducto);

            if (productoYaAgregado) {
                mostrarError(`El producto "${productoTexto}" ya ha sido agregado al pedido.`);
                // Opcional: podrías ofrecer actualizar la cantidad del producto existente
                // if (confirm(`El producto "${productoTexto}" ya está en el pedido. ¿Desea actualizar la cantidad a ${cantidad}?`)) {
                //     productoYaAgregado.CantidadPedida = cantidad;
                //     productoYaAgregado.Observaciones = observaciones; // También podrías actualizar observaciones
                //     mostrarProductosAgregados();
                //     LimpiarCampos();
                // }
                return; // No agregar si ya existe y no se actualiza
            }
            // --- FIN DE LA VERIFICACIÓN DE PRODUCTO DUPLICADO ---

            productosAgregados.push({
                IdSolicitud: 0, // Este ID usualmente se refiere al IdSolicitudDetalle para un nuevo ítem
                oProductos: {
                    IdProducto: idProducto,
                    Detalle: productoTexto // Guardar el texto es útil para mostrar en la tabla temporal
                },
                CantidadPedida: cantidad,
                CantidadEntregada: 0, // Siempre 0 al crear
                FechaPedido: $("#txtfechapedido").val(), // Tomar de la cabecera del pedido
                FechaEntrega: null,
                IdUsuarioPedido: $("#txtusuarioId").val(), // Asegúrate que este ID existe y es correcto
                CodigoArea: '@Session["CodArea"]',       // Usar el código de la sesión
                CodigoSector: '@Session["CodSector"]',    // Usar el código de la sesión
                IdUsuarioEntrega: null,
                Observaciones: observaciones,
                NroPedido: $("#txtpedido").val(), // El Nro de Pedido de la cabecera, puede estar vacío al agregar
                Visado: false,
                // NombreArea y NombreSector no son estrictamente necesarios aquí si usas los códigos,
                // pero pueden ser útiles si los muestras en la tabla temporal.
                NombreArea: '@Session["NombreArea"]',
                NombreSector: '@Session["NombreSector"]'
            });

            LimpiarCampos();
            mostrarProductosAgregados();
        }


        function mostrarProductosAgregados() {
            var tabla = $("#tablaProductos tbody");
            tabla.empty();

            let colorToggle = false;

            productosAgregados.forEach((producto, index) => {
                const fila = $("<tr>")
                    .addClass(colorToggle ? "table-primary" : "") // Quité table-light para alternar con el default
                    .attr("data-producto-id", producto.oProductos.IdProducto);

                const btnEliminar = $("<button>")
                    .addClass("btn btn-danger btn-sm")
                    .html('<i class="fas fa-trash"></i> Eliminar') // Texto para claridad
                    .on("click", () => eliminarProducto(index));

                fila.append(
                    $("<td>").text(producto.oProductos.Detalle),
                    $("<td>").text(producto.CantidadPedida),
                    $("<td>").text(producto.Observaciones || "-"),
                    $("<td>").append(btnEliminar)
                );

                tabla.append(fila);
                colorToggle = !colorToggle;
            });

            $("#contadorProductos").text(`Productos agregados: ${productosAgregados.length}`);

            if (productosAgregados.length > 0) {
                $("#seccionProductos").show();
                $("#mensajeVacioProductos").hide(); // Ocultar mensaje de vacío
            } else {
                $("#seccionProductos").hide();
                $("#mensajeVacioProductos").show(); // Mostrar mensaje de vacío
            }
        }


        function eliminarProducto(index) {
            if (confirm("¿Eliminar este producto del pedido?")) {
                productosAgregados.splice(index, 1);
                mostrarProductosAgregados(); // Actualizar vista


            }
        }



                  function editar() {
                $("#tabla tbody").on("click", '.btn-editar', function () {
                    var filaSeleccionada = $(this).closest("tr");
                    var data = tabladata.row(filaSeleccionada).data();
                    abrirModal(data);
                });
            }
            function selects2() {
                $('#cbodetalle').select2({
                    placeholder: "Seleccione un producto",
                    allowClear: true,
                    dropdownParent: $('#FormModal') // Importante para modales
                });
            }

        function LimpiarSelects() {

            $('#cbodetalle,#cbocodigo,#cborubro,#cbotipo ').val(null).trigger('change');

            CargarProductos(permisos.map(p => p.Accesos));
        }

        function LimpiarCampos() { // Para limpiar campos de producto individual
            $("#txtcantidad").val(1);
            $("#txtobservaciones").val("");
            $("#cbodetalle").val(null).trigger('change'); // Esto ya debería limpiar los campos de info
            // No es necesario limpiar cbostockactual, infocodigoid, etc. aquí si se actualizan con el change de cbodetalle
        }
        // Información del producto
        $('#StockDatos').on('input', function () {
            var inputVal = $(this).val();
            var selectedOption = $('#cbodetalle option').filter(function () {
                return $(this).text() === inputVal;
            });

            if (selectedOption.length) {
                var idProducto = selectedOption.data('id');

                var stockActual = stockprod[idProducto];
                if (stockActual !== undefined) {
                    $("#cbostockactual").val(stockActual).show();
                } else {
                    $("#cbostockactual").val("").hide();
                }

                var codigoid = codigoidprod[idProducto];
                if (codigoid !== undefined) {
                    $("#infocodigoid").val(codigoid).show();
                } else {
                    $("#infocodigoid").val("").hide();
                }

                var rubro = rubroprod[idProducto];
                if (rubro !== undefined) {
                    $("#inforubro").val(rubro).trigger('change').show();
                } else {
                    $("#inforubro").val("").hide();
                }

                var tipo = tipoprod[idProducto];
                if (tipo !== undefined) {
                    $("#infotipo").val(tipo).trigger('change').show();
                } else {
                    $("#infotipo").val("").hide();
                }
                $("#txtidProducto").val(idProducto);
            }
        });

        function CargarProductos(permisos) {
    // Devolver una promesa para poder usar await
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: '@Url.Action("ListarProductos", "Toner")',
                    type: "GET",
                    data: null, // No necesitas enviar permisos si el backend los obtiene de la sesión/rol
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        $("#cbodetalle").empty(); // Limpiar opciones existentes
                        // Añadir opción placeholder/default si Select2 no la añade automáticamente
                         $("<option>").attr({ "value": "" }).text("Seleccione un producto").appendTo("#cbodetalle");

                        var opciones = [];
                        var tienePermiso24 = permisos.includes(24);
                        var tienePermiso184 = permisos.includes(184);

                        stockprod = {}; // Resetear objetos de datos
                        codigoidprod = {};
                        rubroprod = {};
                        tipoprod = {};

                        $.each(data.data, function (index, valor) {
                            if (valor.Activo === true) {
                                let añadir = false;
                                if (tienePermiso24 && valor.oRubros.Rubro !== "Insumos Informaticos") {
                                     añadir = true;
                                } else if (tienePermiso184 && valor.oRubros.Rubro === "Insumos Informaticos") {
                                     añadir = true;
                                } else if (!tienePermiso24 && !tienePermiso184) {
                                     // Si no hay permisos específicos, ¿mostrar todos? Ajusta según tu lógica.
                                     // añadir = true; // Descomenta si quieres mostrar todos si no hay permisos específicos
                                }


                                if (añadir) {
                                     // Guardar datos asociados al ID
                                    stockprod[valor.IdProducto] = valor.StockActual;
                                    codigoidprod[valor.IdProducto] = valor.CodigoId;
                                    rubroprod[valor.IdProducto] = valor.oRubros.Rubro;
                                    tipoprod[valor.IdProducto] = valor.oTipos.Tipo;
                                    // Agregar opción al array para Select2
                                    opciones.push({
                                        id: valor.IdProducto,
                                        text: valor.Detalle
                                    });
                                }
                            }
                        });

                        // Inicializar o actualizar Select2 con los nuevos datos
                        $('#cbodetalle').select2({
                            placeholder: "Seleccione un producto",
                            data: opciones, // Pasar los datos aquí
                            allowClear: true,
                            dropdownParent: $('#FormModal'), // Asegúrate que esto sigue siendo necesario
                        }).val(null).trigger('change'); // Resetear selección inicial

                        resolve(); // Indicar que la carga fue exitosa
                    },
                    error: function (error) {
                        console.log("Error cargando productos:", error);
                        reject(error); // Indicar que hubo un error
                    },
                });
            });
        }

        function modalTitle(title) {
            document.getElementById('titulodinamico').innerText = title;
        }


        async function abrirModal(data) {
            try {
                const accesos = permisos.map(p => p.Accesos);
                // Asegurarse de que los productos estén cargados ANTES de continuar
                await CargarProductos(accesos); // Asumiendo que CargarProductos devuelve una Promesa o es síncrono

                // --- Reset Común para Nuevo y Editar ---
                $("#txtid").val(0);
                $('#txtArea').val('@Session["NombreArea"]');
                $('#txtSector').val('@Session["NombreSector"]');
                // Usar el ID del usuario de la sesión directamente
                //$('#txtusuario').val('@Session["AccesCode"]'); // No parece haber un campo txtusuario, usar txtusuarioId
                // txtusuarioNombre ya se llena desde Razor
                $("#mensajeError").hide();
                $('#cbodetalle').val(null).trigger('change').prop("disabled", false); // Resetear y habilitar select
                $("#txtcantidad").val(1); // Valor por defecto
                $("#txtobservaciones").val("");
                $("#infocodigoid").val("");
                $("#inforubro").val("");
                $("#infotipo").val("");
                $("#cbostockactual").val(""); // Limpiar stock
                $("#txtpedido").val("").prop("readonly", true); // Limpiar Nro Pedido (Autogenerado)
                const fechaActual = new Date();
                // IMPORTANTE: Usar formato 'dd/mm/yy' para visualización si usas datepicker en ese formato,
                // pero asegúrate que al *guardar* uses 'yy-mm-dd' si el backend lo espera así.
                // $("#txtfechapedido").val($.datepicker.formatDate('dd/mm/yy', fechaActual)).prop("disabled", false);
                // O si prefieres ISO y tu datepicker lo maneja:
                $("#txtfechapedido").val($.datepicker.formatDate('yy-mm-dd', fechaActual)).prop("disabled", false);


                // --- Lógica Específica ---
                if (data) {
                    // ***** MODO EDICIÓN *****
                    modalTitle('Editar Producto del Pedido');
                    $("#leyendaProductoIndividual").text("Editar Producto"); // Cambiar leyenda
                    $("#btnGuardar").text("Actualizar Producto").data("modo", "editar"); // Cambiar texto y añadir info de modo
                    $("#btnImprimir").prop("disabled", !(data.NroPedido && data.NroPedido !== "0"));

                    // Ocultar elementos de "Agregar Múltiples"
                    $("#columnaListaProductos").hide();       // Ocultar columna derecha
                    $("#seccionBusquedaAvanzada").hide();     // Ocultar búsqueda avanzada
                    $("#btnAgregar").hide();                  // Ocultar botón "AGREGAR PRODUCTO"

                    // Mostrar elementos de edición individual (ya visibles por defecto, pero aseguramos)
                    $("#columnaProductoIndividual").removeClass().addClass("col-lg-12"); // Hacer que ocupe todo el ancho
                     $("#columnaProductoIndividual").show();


                    // Poblar datos del registro específico
                    $("#txtid").val(data.IdSolicitud);
                    $("#txtpedido").val(data.NroPedido).prop("readonly", true); // Mostrar Nro Pedido

                    // Formatear y deshabilitar fecha si ya existe
                    if (data.FechaPedido) {
                        const fechaPedido = new Date(data.FechaPedido);
                         if (!isNaN(fechaPedido.getTime())) {
                             // Usar el mismo formato que al crear
                             $("#txtfechapedido").val($.datepicker.formatDate('yy-mm-dd', fechaPedido)).prop("disabled", true);
                         }
                    }

                    // Seleccionar el producto EN EL DROPDOWN
                    // IMPORTANTE: Asegúrate que CargarProductos ya terminó y el option existe
                    $('#cbodetalle').val(data.oProductos.IdProducto).trigger('change').prop("disabled", true); // Seleccionar y deshabilitar

                     // Esperar un instante mínimo para que el evento 'change' de select2 actualice los campos info
                    await new Promise(resolve => setTimeout(resolve, 50)); // Pequeña demora

                    // Poblar cantidad y observaciones DESPUÉS de seleccionar el producto
                    $("#txtcantidad").val(data.CantidadPedida);
                    $("#txtobservaciones").val(data.Observaciones);

                     // Poblar campos de info adicional (aunque el 'change' debería hacerlo, es bueno asegurar)
                    $("#infocodigoid").val(obtenerCodigoPorId(data.oProductos.IdProducto));
                    $("#inforubro").val(obtenerRubroPorId(data.oProductos.IdProducto));
                    $("#infotipo").val(obtenerTipoPorId(data.oProductos.IdProducto));
                    $("#cbostockactual").val(obtenerStockPorId(data.oProductos.IdProducto));


                } else {
                    // ***** MODO NUEVO PEDIDO *****
                    modalTitle('Crear Nuevo Pedido');
                    $("#leyendaProductoIndividual").text("Agregar Producto"); // Restaurar leyenda
                    $("#btnGuardar").text("Guardar Pedido").data("modo", "nuevo"); // Cambiar texto y añadir info de modo
                    $("#btnImprimir").prop("disabled", true);

                    // Mostrar elementos de "Agregar Múltiples"
                    $("#columnaListaProductos").show();         // Mostrar columna derecha
                    $("#seccionBusquedaAvanzada").show();       // Mostrar búsqueda avanzada
                    $("#btnAgregar").show();                    // Mostrar botón "AGREGAR PRODUCTO"

                    // Asegurar layout correcto
                     $("#columnaProductoIndividual").removeClass().addClass("col-lg-5"); // Restaurar ancho original
                     $("#columnaProductoIndividual").show();


                    // Limpiar lista de productos agregados
                    productosAgregados = [];
                    mostrarProductosAgregados(); // Actualizar tabla de productos agregados (vacía)

                    // Campos ya reseteados al inicio
                }

                $("#FormModal").modal("show");

            } catch (error) {
                console.error("Error en abrirModal:", error);
                mostrarError("Error al preparar el modal. Verifique la consola.");
            }
        }

        $("#cbodetalle").change(function () {
            var idProducto = $(this).val();

            var stockActual = obtenerStockPorId(idProducto);
            if (stockActual !== undefined) {
                $("#cbostockactual ").val(stockActual);
                $("#cbostockactual").show();
            }

            var codigoid = obtenerCodigoPorId(idProducto);
            if (codigoid !== undefined) {
                $("#infocodigoid").val(codigoid);
                $("#infocodigoid").show();
            }

            var rubro = obtenerRubroPorId(idProducto);
            if (rubro !== undefined) {
                $("#inforubro").val(rubro);
                $("#inforubro").show();
            }

            var tipo = obtenerTipoPorId(idProducto);
            if (tipo !== undefined) {
                $("#infotipo").val(tipo);
                $("#infotipo").show();
            }
        });

        function obtenerStockPorId(idProducto) {
            return stockprod[idProducto];
        }
        function obtenerCodigoPorId(idProducto) {
            return codigoidprod[idProducto];
        }
        function obtenerRubroPorId(idProducto) {
            return rubroprod[idProducto];
        }
        function obtenerTipoPorId(idProducto) {
            return tipoprod[idProducto];
        }

        function mostrarError(mensaje) {
            $("#mensajeError").text(mensaje).show().delay(5000).fadeOut();
        }



        function inicializarDataTable() {

            $('#tituloTablaPedidos').text(tituloArea)
                .removeClass('clickable')
                .css('cursor', 'default'); // Asegurar cursor normal



            if ($.fn.DataTable.isDataTable('#tabla')) {
                tabladata.destroy(); // Destruir si ya existe para reinicializar
            }

                tabladata = $('#tabla').DataTable({
                    ajax: {
                        url:  urlPedidosArea,
                        dataSrc: 'data'
                    },
                    columns: [
                        { data: "IdSolicitud", visible: false },
                        { data: "NroPedido", title: "N° Pedido" }, // Mover a primera posición
                        { data: "oProductos.Detalle", title: "Producto" },
                        { data: "CantidadPedida", title: "Cant. Pedida" },
                        {
                            data: "CantidadEntregada",
                            title: "Cant. Entregada",
                            render: function (data) {
                                return data || '0';
                            }
                        },
                        { data: "NombreUsuarioPedido", title: "Solicitado por" },
                        {
                            data: "FechaPedido",
                            title: "Fecha Pedido",
                            render: function (data) {
                                return data ? new Date(data).toLocaleDateString() : '';
                            }
                        },
                        {
                            data: "FechaEntrega",
                            title: "Fecha Entrega",
                            render: function (data) {
                                return data ? new Date(data).toLocaleDateString() : 'Pendiente';
                            }
                        },
                        {
                            data: "Visado",
                            title: "Visado",
                            render: function (data) {
                                return data ? '<i class="fas fa-check-circle text-success"></i>' :
                                    '<i class="fas fa-times-circle text-danger"></i>';
                            }
                        },
                        {
                            data: null,
                            render: function (data, type, row) {
                                if (!row.Visado && row.CantidadEntregada > 0) {
                                    return `<button class="btn btn-sm btn-warning btn-visar"
                                 data-id="${row.IdSolicitud}">Visar</button>`;
                                }
                                return '';
                            }
                        },


                        {
                            "data": null,
                            "render": function (data, type, row) {
                                return '<button type="button" class="btn btn-primary btn-sm ms-2 btn-editar"> <i class="fas fa-edit"></i></button>';
                            },

                            "orderable": false,
                            "searchable": false,
                            "width": "90px"
                        }
                    ],

                    order: [
                        [4, 'asc'], // Ordena por la 6ª columna (índice 5, "Fecha Pedido") en orden descendente
                        // Opcional: Luego por la 1ª columna (índice 0, "IdSolicitud") descendente
                        // Ajusta el índice de la columna 'IdSolicitud' si no es la primera visible/invisible.
                        // Si IdSolicitud está visible y es la primera, sería [0, 'desc']
                        // Si está invisible como en tu ejemplo, y quieres usarla, asegúrate que esté en `columns`.
                    ],

                    language: {
                        url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-ES.json'
                    },
                    responsive: true, // Para adaptar a pantallas pequeñas
                    processing: true, // Muestra indicador de carga
                    serverSide: false
                });

                  $('#tabla tbody').on('click', '.btn-visar', function() {
                  const id = $(this).data('id');

                  Swal.fire({
                      title: '¿Confirmar visado?',
                      text: "Esta acción no se puede deshacer",
                      icon: 'warning',
                      showCancelButton: true,
                      confirmButtonColor: '#3085d6',
                      cancelButtonColor: '#d33'
                  }).then((result) => {
                      if (result.isConfirmed) {
                          $.post('@Url.Action("RegistrarVisado", "SolicitudPedidos")', { idPedido: id })
                          .done(function(response) {
                              Swal.fire(response.mensaje);
                              tabladata.ajax.reload();
                          });
                      }
                  });
              });

            }






               function buscarPorNumero() {
                    const nroPedido = $("#txtBuscarPedido").val().trim();
                    if (!nroPedido) {
                        Swal.fire('Atención', 'Ingrese un número de pedido para buscar.', 'warning');
                        // Quizás volver a la vista de área si la búsqueda está vacía?
                        // mostrarPedidosArea();
                        return;
                    }

                    if (tabladata) {
                        // Actualizar título para reflejar la búsqueda y hacerlo clickable para volver al área
                        $('#tituloTablaPedidos').text(tituloBusqueda + " N°: " + nroPedido)
                                               .addClass('clickable')
                                               .css('cursor', 'pointer');

                        var urlBusqueda = '@Url.Action("ListarFiltradosNro", "SolicitudPedidos")' +
                            '?nroPedido=' + encodeURIComponent(nroPedido) +
                            '&soloPendientes=false'; // O ajusta soloPendientes según necesites

                        tabladata.ajax.url(urlBusqueda).load(function(json) {
                            // json contiene la respuesta del servidor
                            if (!json || !json.data || json.data.length === 0) {
                                Swal.fire('Sin Resultados', 'No se encontraron pedidos con ese número.', 'info');
                                // Opcional: si no hay resultados, podrías querer volver al título de área
                                // $('#tituloTablaPedidos').text(tituloArea).removeClass('clickable').css('cursor', 'default');
                            }
                             // Limpiar campo de búsqueda después de buscar?
                             // $("#txtBuscarPedido").val('');
                        });
                    } else {
                        console.error("DataTable no inicializada.");
                    }
                        }

        // Función para mostrar "Mis Pedidos"
        function mostrarMisPedidos() {
            if (tabladata) {
                $('#tituloTablaPedidos').text(tituloMisPedidos)
                    .addClass('clickable') // Hacer clickable
                    .css('cursor', 'pointer');
                // Cambiar URL y recargar
                tabladata.ajax.url(urlMisPedidos).load();
            } else {
                console.error("DataTable no inicializada.");
            }
        }


        // Función para mostrar "Pedidos del Área" (llamada desde el click del título)
        function mostrarPedidosArea() {
            if (tabladata) {
                $('#tituloTablaPedidos').text(tituloArea)
                                       .removeClass('clickable') // Quitar clase clickable
                                       .css('cursor', 'default'); // Cursor normal
                // Cambiar URL y recargar
                tabladata.ajax.url(urlPedidosArea).load();
            } else {
                console.error("DataTable no inicializada.");
            }
        }




        function Guardar() {
            const modo = $("#btnGuardar").data("modo"); // Obtener 'nuevo' o 'editar'

            if (modo === "nuevo") {
                // --- Lógica para GUARDAR NUEVO PEDIDO (con múltiples productos) ---
                if (productosAgregados.length === 0) {
                    mostrarError("¡Debe agregar al menos un producto al pedido!");
                    return;
                }

                const solicitud = {
                    IdSolicitud: "0", // Siempre 0 para nuevo
                    NroPedido: $("#txtpedido").val(), // Debería estar vacío o ser generado por backend
                    FechaPedido: $("#txtfechapedido").val(), // Asegúrate que el formato sea YYYY-MM-DD
                    IdUsuarioPedido: $("#txtusuarioId").val(), // Usar el ID del usuario de la sesión
                    CodigoArea: '@Session["CodArea"]',       // Obtener de la sesión
                    CodigoSector: '@Session["CodSector"]'    // Obtener de la sesión
                    // NombreArea y NombreSector no suelen enviarse, se obtienen por Código en backend
                };

                // Mapear solo los datos necesarios de productosAgregados
                const listaProductos = productosAgregados.map(producto => ({
                     // IdSolicitudDetalle: 0, // El backend lo asignará si es necesario
                     // IdSolicitud: 0, // El backend lo asignará al guardar la cabecera
                    oProductos: {
                        IdProducto: producto.oProductos.IdProducto
                        // No enviar Detalle, el backend lo obtiene del IdProducto
                    },
                    CantidadPedida: producto.CantidadPedida,
                    Observaciones: producto.Observaciones
                    // No enviar CantidadEntregada, FechaEntrega, IdUsuarioEntrega, Visado, etc.
                }));

                $.ajax({
                    url: '@Url.Action("GuardarPedidos", "SolicitudPedidos")', // Endpoint para guardar nuevo
                    type: "POST",
                    // Enviar la cabecera (solicitud) y la lista de detalles
                    data: JSON.stringify({
                        objeto: solicitud,
                        listaProductos: listaProductos
                    }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        if (response.resultado) {
                             // Podrías mostrar el NroPedido asignado en el mensaje
                            Swal.fire("¡Éxito!", response.mensaje + (response.nroPedido ? ` (N° Pedido: ${response.nroPedido})` : ''), "success");
                            $("#FormModal").modal("hide");
                            tabladata.ajax.reload(null, false); // Recargar sin resetear paginación
                            productosAgregados = []; // Limpiar por si acaso
                        } else {
                            mostrarError("Error al guardar: " + response.mensaje);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error AJAX en Guardar (Nuevo):", error);
                        mostrarError("Error de conexión al intentar guardar el pedido.");
                    }
                });

            } else if (modo === "editar") {
                // --- Lógica para ACTUALIZAR UN PRODUCTO EXISTENTE ---
                const idProductoSeleccionado = $("#cbodetalle").val();
                const cantidad = parseInt($("#txtcantidad").val());

                if (!idProductoSeleccionado || cantidad <= 0) {
                     mostrarError("El producto y la cantidad son requeridos.");
                     return;
                }

                // Crear el objeto que representa la LÍNEA específica a actualizar
                const solicitudActualizada = {
                    IdSolicitud: $("#txtid").val(), // El ID de la línea específica (viene de la tabla)
                    oProductos: {
                        IdProducto: idProductoSeleccionado // Aunque esté deshabilitado, el valor está presente
                    },
                    CantidadPedida: cantidad,
                    Observaciones: $("#txtobservaciones").val(),
                    // Incluir otros campos si tu endpoint de Actualizar los necesita para identificar/validar
                    NroPedido: $("#txtpedido").val(), // Podría ser útil en el backend
                    // No se suele actualizar FechaPedido, Usuario, Area, Sector desde aquí
                };

                 $.ajax({
                    url: '@Url.Action("Actualizar", "SolicitudPedidos")', // Endpoint para actualizar existente
                    type: "POST", // O "PUT" si usas RESTful
                    data: JSON.stringify(solicitudActualizada), // Enviar solo el objeto de la línea actualizada
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        if (response.resultado) {
                            Swal.fire("¡Éxito!", response.mensaje, "success");
                            $("#FormModal").modal("hide");
                            tabladata.ajax.reload(null, false); // Recargar sin resetear paginación
                        } else {
                            mostrarError("Error al actualizar: " + response.mensaje);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error AJAX en Guardar (Editar):", error);
                        mostrarError("Error de conexión al intentar actualizar el producto.");
                    }
                });

            } else {
                console.error("Modo de guardado desconocido:", modo);
                mostrarError("Error interno: No se pudo determinar la acción a realizar.");
            }
        }







        $("#txtfechapedido").datepicker({
            dateFormat: 'yy-mm-dd',
            minDate: -7,
            maxDate: +7
        });

        function imprimirPedido() {
            const pedido = {
                nroPedido: $("#txtpedido").val(),
                fechaPedido: $("#txtfechapedido").val(),
                usuario: $("#txtusuarioNombre").val(),
                area: $("#txtArea").val(),
                sector: $("#txtSector").val(),
                producto: {
                    // Obtener el texto del producto del select (aunque esté deshabilitado)
                    Detalle: $("#cbodetalle option:selected").text(),
                    CantidadPedida: $("#txtcantidad").val()
                    // Podrías incluir observaciones si la plantilla de impresión las contemplara:
                    // Observaciones: $("#txtobservaciones").val()
                },
                cantidad: $("#txtcantidad").val(),
                observaciones: $("#txtobservaciones").val()
            };

            const contenido = `
                <style>
                    .comprobante {
                        font-family: Arial, sans-serif;
                        max-width: 800px;
                        margin: 20px auto;
                        padding: 20px;
                        border: 1px solid #ddd;
                    }
                    .header {
                        display: flex;
                        justify-content: space-between;
                        margin-bottom: 20px;
                    }
                    .logo {
                        max-width: 2cm;
                        max-height: 2cm;
                    }
                    .titulo {
                        text-align: center;
                        margin: 20px 0;
                    }
                    .datos-usuario {
                        margin-bottom: 30px;
                    }
                    table {
                        width: 100%;
                        border-collapse: collapse;
                        margin: 20px 0;
                    }
                    th, td {
                        border: 1px solid #000;
                        padding: 8px;
                        text-align: left;
                    }
                    .firmas {
                        display: flex;
                        justify-content: space-between;
                        margin-top: 50px;
                    }
                    .firma {
                        width: 45%;
                        border-top: 1px solid #000;
                        padding-top: 10px;
                        margin-top: 60px;
                    }
                    .pie {
                        margin-top: 30px;
                        text-align: center;
                    }
                    media print {
                        body { visibility: hidden; }
                        .comprobante { visibility: visible; }
                    }
                </style>

                <div class="comprobante">
                    <div class="header">
                        <div>
                            <h2>Nota de pedido de insumos generales</h2>
                            <p>Fecha: ${pedido.fechaPedido}</p>
                            <p>N° de Pedido: ${pedido.nroPedido}</p>
                        </div>
                         <img src="/Content/images/04.png" class="logo" alt="Logo">
                    </div>

                    <div class="datos-usuario">
                        <p>Solicitante: ${pedido.usuario}</p>
                        <p>Área: ${pedido.area}</p>
                        <p>Sector: ${pedido.sector}</p>
                    </div>

                  <table>
                    <thead>
                        <tr>
                            <th>Descripción del Producto</th>
                            <th style="width: 18%;" class="cantidad">Cant. Solicitada</th>
                            <th style="width: 18%;" class="cantidad">Cant. Entregada</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>${pedido.producto.Detalle}</td>
                            <td class="cantidad">${pedido.producto.CantidadPedida}</td>
                            <td class="cantidad vacio"> </td> <!-- Espacio vacío para completar a mano -->
                        </tr>
                        <!-- Si necesitaras más filas vacías -->
                        <!-- <tr><td> </td><td class="cantidad"> </td><td class="cantidad vacio"> </td></tr> -->
                    </tbody>
                </table>

                    <div class="firmas">
                        <div class="firma">
                            Firma del Solicitante<br>
                            ${pedido.usuario}
                        </div>
                        <div class="firma">
                            Firma de Recepción<br>
                            (Nombre y apellido)
                        </div>
                    </div>

                    <div class="pie">
                        <p>Fecha de impresión: ${new Date().toLocaleDateString()}</p>
                        <p>N° de Pedido: ${pedido.nroPedido}</p>
                    </div>
                </div>
            `;

            const ventanaImpresa = window.open('', '_blank');
            ventanaImpresa.document.write(contenido);
            ventanaImpresa.document.close();
            ventanaImpresa.print();
        }
    </script>
}