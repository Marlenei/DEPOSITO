
@{
    ViewBag.Title = "EntregaPedidos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card shadow-sm">
    <div style="background-image: url('../Content/images/fondohospi4.png'); background-size:cover;  background-position: center; background-repeat: no-repeat; width:auto; height:auto">
        <h5 class="card-title mb-0 text-white" style="padding-bottom: 5px; padding-top: 5px">
            <i class="fas fa-clipboard-list me-2"></i>Entrega de Pedidos
        </h5>
    </div>


    <div class="card-body">
        @if (User.Identity.IsAuthenticated)
        {
            <div class="alert alert-info mb-4">
                <div class="row align-items-center">
                    <div class="col-md-4 mb-2 mb-md-0">
                        <i class="fas fa-user me-2"></i><strong>@User.Identity.Name</strong>
                    </div>
                    <div class="col-md-4 mb-2 mb-md-0">
                        <span class="d-block text-success">@Session["NombreArea"]</span>
                        <small class="text-muted">Area</small>
                    </div>
                    <div class="col-md-4">
                        <span class="d-block text-success">@Session["NombreSector"]</span>
                        <small class="text-muted">Sector</small>
                    </div>
                </div>
            </div>
        }



        <div class="row mb-4">
            <div class="col-12 col-md-2">
                <div class="input-group">
                    <input type="text" class="form-control"
                           id="txtBuscarPedido"
                           placeholder="Buscar por N° de Pedido">
                    <button class="btn btn-primary"
                            type="button"
                            onclick="buscarPorNumero()">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Bloque de filtros -->
        <div class="row mb-4">
            <div class="col-12 col-md-3 mb-3 mb-md-0">
                <label for="cboArea">Área</label>
                <select id="cboArea" class="form-select" onchange="">
                    <option value="">Todas las áreas</option>
                    <!-- Aquí se llenarán las áreas desde el servidor -->
                </select>
            </div>

            <div class="col-12 col-md-3 mb-3 mb-md-0">
                <label for="cboSector">Sector</label>
                <select id="cboSector" class="form-select">
                    <option value="">Seleccione un Sector</option>
                    <option value="0">Todos</option> <!-- Opción para todos -->
                    <!-- Aquí se llenarán los sectores según el área seleccionada -->
                </select>
            </div>

            <div class="col-12 col-md-3 mb-3 mb-md-0">
                <label for="txtFechaInicio">Fecha Inicio</label>
                <input type="date" id="txtFechaInicio" class="form-control"
                       value="@DateTime.Now.AddDays(-30).ToString("yyyy-MM-dd")">
            </div>

            <div class="col-12 col-md-3 mb-3 mb-md-0">
                <label for="txtFechaFin">Fecha Fin</label>
                <input type="date" id="txtFechaFin" class="form-control"
                       value="@DateTime.Now.ToString("yyyy-MM-dd")">
            </div>
        </div>

        <div class="d-flex justify-content-end">
            <button class="btn btn-primary" onclick="aplicarFiltros()">
                <i class="fas fa-filter"></i> Aplicar Filtros
            </button>
        </div>

        <div class="table-responsive">
            <table id="tabla" class="table table-striped-columns table-hover table-bordered" style="width: 100% !important; table-layout: fixed;">
                <thead class="table-dark">
                    <tr>
                        <th></th>
                        <th>Producto</th>
                        <th>Area</th>
                        <th>Sector</th>
                        <th>Cant. Pedida</th>
                        <th>Cant. Entregada</th>
                        <th>Fecha Entrega</th>
                        <th>N° Pedido</th>
                        <th>Visado</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="FormModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-dark text-white">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Detalles del Pedido</h1>
                <button type="button" class="btn-close bg-light" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input id="txtid" type="hidden" value="" />
                <input type="hidden" id="txtusuario" value="@Session["AccesCode"]" readonly>

                <!-- Contenedor principal para los campos del formulario -->
                <div class="container-fluid">
                    <!-- Fila para Usuario y Fecha Pedido -->
                    <div class="row justify-content-center g-3 mb-3">
                        <div class="col-12 col-md-6">
                            <label for="txtUsuarioNombreDisplay" class="form-label">Usuario Logueado</label>
                            <input type="text" class="form-control" id="txtUsuarioNombreDisplay" value="@User.Identity.Name" readonly>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="txtfechapedido" class="form-label">Fecha de Pedido</label>
                            <input type="text" class="form-control" id="txtfechapedido">
                        </div>
                    </div>

                    <!-- Fila para N° Pedido y Producto (el producto ocupará más espacio) -->
                    <div class="row justify-content-center g-3 mb-3">
                        <div class="col-12 col-md-6">
                            <label for="txtpedido" class="form-label">N° de Pedido</label>
                            <input type="text" class="form-control" id="txtpedido" maxlength="15" readonly>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="cbodetalle" class="form-label">Producto</label>
                            <select id="cbodetalle" class="form-select ProductosS" style="width: 100%">
                                <option value="">Seleccione un Producto</option>
                                <!-- Opciones de producto se cargan dinámicamente -->
                            </select>
                        </div>
                    </div>

                    <!-- Fila para Área y Sector -->
                    <div class="row justify-content-center g-3 mb-3">
                        <div class="col-12 col-md-6">
                            <label for="txtArea" class="form-label">Área</label>
                            <input type="text" class="form-control" id="txtArea" value="@Session["NombreArea"]" readonly>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="txtSector" class="form-label">Sector</label>
                            <input type="text" class="form-control" id="txtSector" value="@Session["NombreSector"]" readonly>
                        </div>
                    </div>

                    <!-- Fila para Cantidad y Código ID Producto -->
                    <div class="row justify-content-center g-3 mb-3">
                        <div class="col-12 col-md-6">
                            <label for="txtcantidad" class="form-label">Cantidad</label>
                            <input type="number" class="form-control" id="txtcantidad" min="1" required placeholder="Coloque una cantidad" oninput="this.value = this.value.replace(/[^0-9]/g, ''); if(this.value < 1 && this.value !== '') this.value = 1;">
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="txtcodigoid" class="form-label">Código ID Producto (Opcional)</label>
                            <input type="text" class="form-control" id="txtcodigoid" maxlength="30" placeholder="Ej: 2025-000360">
                        </div>
                    </div>

                    <!-- Fila para Observaciones (podría ocupar más ancho si lo deseas) -->
                    <div class="row justify-content-center g-3 mb-3">
                        <div class="col-12">

                            <label for="txtobservaciones" class="form-label">Observaciones (Opcional)</label>
                            <input type="text" class="form-control" id="txtobservaciones" maxlength="50" placeholder="Notas adicionales sobre el pedido">
                        </div>
                    </div>
                </div> <!-- Fin del .container-fluid -->
                <!-- Mensaje de Error -->
                <div class="row mt-3">
                    <div class="col-12">
                        <div id="mensajeError" class="alert alert-danger" role="alert" style="display:none;"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary btn-guardar" id="btnGuardar">Guardar</button> <!-- Agregado ID a btnGuardar -->
                <button type="button" class="btn btn-info" onclick="imprimirPedido()" id="btnImprimir">
                    <!-- Agregado type="button" para consistencia -->
                    <i class="fas fa-print me-2"></i> Imprimir
                </button>
            </div>
        </div>
    </div>
</div>

@*<input type="hidden" id="userPermissionsJson" value="@Json.Encode(Session["PermissionsCode"])" />*@

@section scripts{
    <script>
        // Configuración Inicial
        var tabladata;
        var filaSeleccionada;
        var productos = {};
        var codigoidprod = {};
        var rubroprod = {};
        var tipoprod = {};
        var appSettings = {};
        var permisos = @Html.Raw(Json.Encode(Session["PermissionsCode"]));
        var filtrarStockEnProducto = true;




        $(document).ready(function () {
            inicializarDataTable();


            var urlrubros = '@Url.Action("ListarRubros", "Toner")'
            CargarRubros(urlrubros, permisos.map(p => p.Accesos));
           /* cargarProductos();*/
              var urlcodigoid = '@Url.Action("ListarProductos", "Toner")'
            CargarCodigosID(urlcodigoid, permisos.map(p => p.Accesos));
            LimpiarSelects();
            CargarProductos(permisos.map(p => p.Accesos));

            $('#filterRubroSelect,#filterAreaSelect,#filterSectorSelect').select2({
                placeholder: "Seleccionar",
                allowClear: true,
            });
            tooltips();
            LimpiarCampos();
            selects2();
            cargarApiUrls();
            $('.btn-guardar').click(Guardar);
            editar();
        });

        function editar() {
            $("#tabla tbody").on("click", '.btn-editar', function () {
                var filaSeleccionada = $(this).closest("tr");
                var data = tabladata.row(filaSeleccionada).data();
                abrirModal(data);
            });
        }

        function LimpiarSelects() {

            $('#cbodetalle,#cbocodigo,#cborubro,#cbotipo ').val(null).trigger('change');

            CargarProductos(permisos.map(p => p.Accesos));
        }

        $(document).ready(function () {
        // Cargar áreas al cargar la página
        $.getJSON('@Url.Action("ObtenerAreas", "SolicitudPedidos")', function (data) {
            $.each(data, function (index, area) {
                $('#cboArea').append($('<option>', {
                    value: area.CodArea,
                    text: area.NombreArea
                }));
            });
        });

        // Al cambiar el área, cargar los sectores correspondientes
            $('#cboArea').change(function () {
            var codArea = $(this).val();
                $('#cboSector').empty(); // Limpiar sectores

            // Agregar opción "Todos"
                $('#cboSector').append($('<option>', {
                value: "0",
                text: "Todos"
            }));

            if (codArea) {
                $.getJSON('@Url.Action("ObtenerSectoresPorArea", "SolicitudPedidos")', { codArea: codArea }, function (data) {
                    $.each(data, function (index, sector) {
                        $('#cboSector').append($('<option>', {
                            value: sector.CodSector,
                            text: sector.Nombre
                        }));
                    });
                });
            }
        });
    });


        function aplicarFiltros() {
            const filtros = {
                codArea: $('#cboArea').val() || null,
                codSector: $('#cboSector').val() || null,
                fechaInicio: $('#txtFechaInicio').val() || null,
                fechaFin: $('#txtFechaFin').val() || null
            };

            tabladata.ajax.url('@Url.Action("ListarFiltrados", "SolicitudPedidos")?' + $.param(filtros)).load();
        }
           function inicializarDataTable() {
            tabladata = $('#tabla').DataTable({
                ajax: {
                    url: '@Url.Action("ListarFiltrados", "SolicitudPedidos")',
                    data: function (d) {
                        d.codArea = $('#cboArea').val();
                        d.codSector = $('#cboSector').val();
                        d.fechaInicio = $('#txtFechaInicio').val();
                        d.fechaFin = $('#txtFechaFin').val();
                        d.nroPedido = $('#txtBuscarPedido').val();
                        d.soloPendientes = false;
                    },
                    dataSrc: 'data', // Asegúrate de que esto esté si tu JSON tiene una propiedad raíz "data"
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error("Error al cargar datos para DataTable:", textStatus, errorThrown);
                        alert("Error al cargar la lista de pedidos. Verifique la conexión o contacte al administrador.");
                    }
                },
                columns: [
                    { data: "IdSolicitud", visible: false },                         // Índice 0
                    { data: "NroPedido", title: "N° Pedido" },                       // Índice 1
                    { data: "oProductos.IdProducto", visible: false },               // Índice 2
                    { data: "oProductos.Detalle", title: "Producto" },
                    { data: "oProductos.StockActual", title: "Stock Actual" },          // Índice 3
                    { data: "NombreArea", title: "Área" },                            // Índice 4
                    { data: "NombreSector", title: "Sector" },                         // Índice 5
                    { data: "CantidadPedida", title: "Cant. Pedida" },               // Índice 6
                    {                                                                 // Índice 7
                        data: "CantidadEntregada",
                        title: "Cant. Entregada",
                        render: function (data, type, row) {
                            const idProducto = row.oProductos ? row.oProductos.IdProducto : '';
                            return `<input type="number" class="form-control input-entregado"
                                           data-id="${row.IdSolicitud}"
                                           data-idproducto="${idProducto}"
                                           value="${data || 0}"
                                           min="0"
                                           max="${row.CantidadPedida}"
                                           ${row.Visado ? 'disabled' : ''}>`;
                        }
                    },
                    {                                                                 // Índice 8
                        data: "FechaPedido", // Viene como "yyyy-MM-dd HH:mm:ss"
                        title: "Fecha Pedido",
                        render: function (data, type, row) {
                            if (!data) {
                                return (type === 'sort') ? 0 : ''; // Maneja nulos/vacíos
                            }
                            let dateObj = new Date(data); // Parsea "yyyy-MM-dd HH:mm:ss"
                            if (isNaN(dateObj.getTime())) {
                                return (type === 'sort') ? 0 : data; // Fecha inválida
                            }

                            if (type === 'sort') {
                                return dateObj.getTime(); // Para ordenación, usa el timestamp
                            }
                            if (type === 'display' || type === 'filter') {
                                // Para mostrar, formato D/M/YYYY
                                const d = dateObj.getDate();
                                const m = dateObj.getMonth() + 1; // getMonth() es 0-indexado
                                const y = dateObj.getFullYear();
                                return `${d}/${m}/${y}`; // ej: "13/5/2025"
                            }
                            return data; // Para otros tipos
                        }
                    },
                    {                                                                 // Índice 9
                        data: "FechaEntrega", // Viene como "yyyy-MM-dd HH:mm:ss" o null
                        title: "Fecha Entrega",
                        render: function (data, type, row) {
                            if (!data) {
                                if (type === 'sort') return 0;
                                return 'Pendiente';
                            }
                            let dateObj = new Date(data);
                            if (isNaN(dateObj.getTime())) {
                                if (type === 'sort') return 0;
                                return 'Pendiente'; // O mostrar 'data'
                            }

                            if (type === 'sort') {
                                return dateObj.getTime();
                            }
                            if (type === 'display' || type === 'filter') {
                                const d = dateObj.getDate();
                                const m = dateObj.getMonth() + 1;
                                const y = dateObj.getFullYear();
                                return `${d}/${m}/${y}`;
                            }
                            return data;
                        }
                    },
                    {                                                                 // Índice 10
                        data: "Visado",
                        title: "Visado",
                        render: function (data) {
                            return data ? '<i class="fas fa-check-circle text-success"></i>' :
                                           '<i class="fas fa-times-circle text-danger"></i>';
                        }
                    },
                    {                                                                 // Índice 11
                        data: null,
                        title: "Acciones",
                        render: function (data, type, row) {
                             if (row.Visado) {
                                 return '';
                             }
                            return '<button type="button" class="btn btn-primary btn-sm ms-2 btn-editar"> <i class="fas fa-edit"></i></button>';
                        },
                        orderable: false,
                        searchable: false,
                        width: "90px"
                    }
                ],

                order: [
                    [8, 'asc'] // Ordena por la columna "Fecha Pedido" (índice 8) descendente
                ],

                language: {
                    url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-ES.json'
                },
                responsive: true,
                processing: true,
                serverSide: false // Confirmado que es false, la ordenación inicial es del SP.
            });


          // Evento para actualizar cantidad entregada
                   $('#tabla tbody').on('change', '.input-entregado', function () {
                       const $input = $(this); // Guardamos una referencia al input
                       const idSolicitud = $input.data('id');
                       const idProducto = $input.data('idproducto');
                       const cantidadEntregadaNueva = $input.val();
                       const filaActual = $input.closest('tr');
                       const datosFila = tabladata.row(filaActual).data();
                       const cantidadOriginal = datosFila.CantidadEntregada || 0; // Valor original antes del cambio

                       // Validación básica
                       if (parseInt(cantidadEntregadaNueva) < 0) {
                            Swal.fire('Error', 'La cantidad entregada no puede ser negativa.', 'warning');
                            $input.val(cantidadOriginal); // Revertir al valor original
                            return;
                       }
                       if (parseInt(cantidadEntregadaNueva) > parseInt(datosFila.CantidadPedida)) {
                            Swal.fire('Error', 'La cantidad entregada no puede superar la cantidad pedida.', 'warning');
                            $input.val(cantidadOriginal); // Revertir al valor original
                            return;
                       }

                       // Si la cantidad nueva es igual a la original, no hacer nada
                       if (parseInt(cantidadEntregadaNueva) === parseInt(cantidadOriginal)) {
                           return;
                       }


                       Swal.fire({
                           title: 'Confirmar Entrega',
                           html: `¿Está seguro que desea registrar la entrega de <strong>${cantidadEntregadaNueva}</strong> unidad(es) para el producto <i>"${datosFila.oProductos.Detalle}"</i>?`,
                           icon: 'question',
                           showCancelButton: true,
                           confirmButtonColor: '#3085d6',
                           cancelButtonColor: '#d33',
                           confirmButtonText: 'Sí, entregar',
                           cancelButtonText: 'Cancelar'
                       }).then((result) => {
                           if (result.isConfirmed) {
                               // Si el usuario confirma, proceder con la actualización
                               $.post('@Url.Action("ActualizarEntrega", "EntregaPedidos")', {
                                   IdSolicitud: idSolicitud,
                                   CantidadEntregada: cantidadEntregadaNueva,
                                   IdProducto: idProducto
                               }).done(function (response) {
                                   if (response.resultado) {
                                       Swal.fire('¡Éxito!', response.mensaje || 'Cantidad entregada actualizada.', 'success');
                                       tabladata.ajax.reload(null, false); // Recargar sin resetear paginación
                                   } else {
                                       Swal.fire('Error', response.mensaje, 'error');
                                       $input.val(cantidadOriginal); // Revertir en caso de error del servidor
                                   }
                               }).fail(function (xhr) {
                                   Swal.fire('Error', 'Ocurrió un error de conexión al actualizar.', 'error');
                                   $input.val(cantidadOriginal); // Revertir en caso de fallo de AJAX
                               });
                           } else {
                               // Si el usuario cancela, revertir el valor del input al original
                               $input.val(cantidadOriginal);
                               Swal.fire('Cancelado', 'La entrega no fue registrada.', 'info');
                           }
                       });
           });
        }








                        // Función para buscar por número de pedido
                      function buscarPorNumero() {
                    const nroPedido = $("#txtBuscarPedido").val().trim(); // Obtener valor del input
                    tabladata.ajax.url('@Url.Action("ListarFiltradosNro", "SolicitudPedidos")' +
                        '?nroPedido=' + encodeURIComponent(nroPedido) +
                        '&soloPendientes=false').load(function(data) {
                            if (data.data.length === 0) {
                                Swal.fire('¡Atención!', 'No se encontraron pedidos con ese número.', 'info');
                            }
                        });
                }





                   //Listado Productos
                 function CargarProductos(permisos) {
                return $.ajax({
                    url: '@Url.Action("ListarProductos", "Toner")',
                    type: "GET",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function(data) {
                        const $select = $("#cbodetalle");
                        $select.empty().append('<option value="">Seleccionar</option>');

                        // Variables para permisos
                        const puedeInsumos = permisos.includes(184);
                        const puedeNoInsumos = permisos.includes(24);

                        // Filtrar y mapear productos
                        const productosFiltrados = data.data.filter(producto => {
                            if (!producto.Activo) return false;
                            const esInsumo = producto.oRubros.Rubro === "Insumos Informaticos";
                            return (esInsumo && puedeInsumos) || (!esInsumo && puedeNoInsumos);
                        });

                        // Llenar select2 con opciones filtradas
                        $select.select2({
                            placeholder: "Selecciona una opción",
                            data: productosFiltrados.map(p => ({
                                id: p.IdProducto,
                                text: p.Detalle
                            })),
                            allowClear: true,
                            dropdownParent: $('#FormModal')
                        }).val(null).trigger('change');

                        // Almacenar metadatos de productos
                        productosFiltrados.forEach(p => {
                            codigoidprod[p.IdProducto] = p.CodigoId;
                            rubroprod[p.IdProducto] = p.oRubros.Rubro;
                            tipoprod[p.IdProducto] = p.oTipos.Tipo;
                        });
                    },
                    error: function(error) {
                        console.error("Error cargando productos:", error);
                        // Aquí podrías mostrar un mensaje al usuario
                    }
                });
            }






        $("#txtfechapedido").datepicker({
            dateFormat: 'dd/mm/yy',
            minDate: -7, // 7 días atrás
            maxDate: +7  // 7 días adelante
        });


         async function abrirModal(data) {
             try {
                 // Extraer los accesos del usuario
                 const accesos = permisos.map(p => p.Accesos);

                 // Esperar a que se carguen los productos antes de continuar
                 await CargarProductos(accesos);

                 // Configuración inicial de campos
                 $('#txtArea').val('@Session["NombreArea"]');
                 $('#txtSector').val('@Session["NombreSector"]');
                 $("#txtid").val(0);
                 $("#txtcantidad").val("");
                 $("#txtobservaciones").val("");
                 $("#txtusuario").val('@Session["AccesCode"]');
                 $("#mensajeError").hide();

                 // Resetear campos dinámicos
                 $("#cbodetalle").val("").prop("disabled", false);
                 $("#txtfechapedido").prop("disabled", false);

                 // Configurar fecha actual
                 const fechaActual = new Date();
                 $("#txtfechapedido").val($.datepicker.formatDate('dd/mm/yy', fechaActual));

                 // Manejo de edición de pedido
                 if (data) {
                     $("#txtid").val(data.IdSolicitud);
                     $("#txtcantidad").val(data.CantidadPedida);
                     $("#txtobservaciones").val(data.Observaciones);
                     $("#txtpedido").val(data.NroPedido);

                     // Configurar producto seleccionado
                     $("#cbodetalle")
                         .val(data.oProductos.IdProducto)
                         .prop("disabled", true)
                         .trigger('change');

                     // Configurar fecha del pedido
                     const fechaPedido = new Date(data.FechaPedido);
                     if (!isNaN(fechaPedido.getTime())) {
                         $("#txtfechapedido").val($.datepicker.formatDate('dd/mm/yy', fechaPedido));
                     }

                     $("#txtfechapedido").prop("disabled", true);

                     // Configurar según tipo de pedido
                     if (data.NroPedido && data.NroPedido !== "0") {
                         $("#btnGuardar").text("Actualizar");
                         $("#exampleModalLabel").text("Modificar Pedido");
                         $("#btnImprimir").prop("disabled", false);
                     }
                 } else {
                     // Generar nuevo número de pedido
                     const response = await $.ajax({
                         url: '@Url.Action("GenerarNumeroPedido", "SolicitudPedidos")'
                     });
                     $("#txtpedido").val(response);

                     $("#btnGuardar").text("Guardar");
                     $("#exampleModalLabel").text("Nuevo Pedido");
                     $("#btnImprimir").prop("disabled", true);
                 }

                 $("#FormModal").modal("show");
             } catch (error) {
                 console.error("Error en abrirModal:", error);
                 // Aquí podrías agregar manejo de errores para el usuario
             }
         }



        // Modificar la función Guardar para incluir código ID
        function Guardar() {
            if ($("#cbodetalle").val() === "") {
                mostrarError("¡Seleccione un producto!");
                return;
            }

            const pedidoData = {
                IdSolicitud: $("#txtid").val(),
                oProductos: {
                    IdProducto: $("#cbodetalle").val(),
                    CodigoId: $("#txtcodigoid").val() // Nuevo campo
                },
                CantidadPedida: $("#txtcantidad").val(),
                Observaciones: $("#txtobservaciones").val(),
                NroPedido: $("#txtpedido").val(),
                IdUsuarioEntrega: $("#txtusuario").val(),
            };

            $.ajax({
                url: '@Url.Action("GuardarPedidos", "SolicitudPedidos")',
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({ objeto: pedidoData }),
                success: function(response) {
                    if (response.resultado) {
                        Swal.fire('¡Éxito!', response.mensaje, 'success');
                        tabladata.ajax.reload();
                        $("#FormModal").modal("hide");
                    } else {
                        mostrarError(response.mensaje);
                    }
                }
            });
        }

        function mostrarError(mensaje) {
            $("#mensajeError").text(mensaje).show().delay(5000).fadeOut();
        }







    </script>





}

