
@{
    ViewBag.Title = "EntregaPedidos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<ol class="breadcrumb mb-4 mt-4">
    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Resumen</a></li>
    <li class="breadcrumb-item active">Pedidos</li>
</ol>

<div class="card shadow-sm">
    <div class="card-header bg-primary text-white">
        <h5 class="card-title mb-0">
            <i class="fas fa-boxes me-2"></i>Entrega de Pedidos
        </h5>
    </div>


    <div class="card-body">
        @if (User.Identity.IsAuthenticated)
        {
            <div class="alert alert-info mb-4">
                <div class="row align-items-center">
                    <div class="col-md-4 mb-2 mb-md-0">
                        <i class="fas fa-user me-2"></i><strong>@User.Identity.Name</strong>
                    </div>
                    <div class="col-md-4 mb-2 mb-md-0">
                        <span class="d-block text-success">@Session["NombreArea"]</span>
                        <small class="text-muted">Código: @Session["CodArea"]</small>
                    </div>
                    <div class="col-md-4">
                        <span class="d-block text-success">@Session["NombreSector"]</span>
                        <small class="text-muted">Código: @Session["CodSector"]</small>
                    </div>
                </div>
            </div>
        }

        @*<div class="d-grid gap-2 d-md-flex justify-content-md-end mb-4">
            <button type="button" class="btn btn-success" onclick="abrirModal(null)">
                <i class="fas fa-plus-circle me-1"></i> Entrega Pedido
            </button>
        </div>*@

        <div class="row mb-4">
            <div class="col-12 col-md-6">
                <div class="input-group">
                    <input type="text" class="form-control"
                           id="txtBuscarPedido"
                           placeholder="Buscar por N° de Pedido">
                    <button class="btn btn-primary"
                            type="button"
                            onclick="buscarPorNumero()">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Bloque de filtros -->
        <div class="row mb-4">
            <div class="col-12 col-md-3 mb-3 mb-md-0">
                <label for="cboArea">Área</label>
                <select id="cboArea" class="form-select" onchange="">
                    <option value="">Todas las áreas</option>
                    <!-- Aquí se llenarán las áreas desde el servidor -->
                </select>
            </div>

            <div class="col-12 col-md-3 mb-3 mb-md-0">
                <label for="cboSector">Sector</label>
                <select id="cboSector" class="form-select">
                    <option value="">Seleccione un Sector</option>
                    <option value="0">Todos</option> <!-- Opción para todos -->
                    <!-- Aquí se llenarán los sectores según el área seleccionada -->
                </select>
            </div>

            <div class="col-12 col-md-3 mb-3 mb-md-0">
                <label for="txtFechaInicio">Fecha Inicio</label>
                <input type="date" id="txtFechaInicio" class="form-control"
                       @*value="@DateTime.Now.AddDays(-30).ToString("yyyy-MM-dd")"*@>
            </div>

            <div class="col-12 col-md-3 mb-3 mb-md-0">
                <label for="txtFechaFin">Fecha Fin</label>
                <input type="date" id="txtFechaFin" class="form-control"
                       @*value="@DateTime.Now.ToString("yyyy-MM-dd")"*@>
            </div>
        </div>

        <div class="d-flex justify-content-end">
            <button class="btn btn-primary" onclick="aplicarFiltros()">
                <i class="fas fa-filter"></i> Aplicar Filtros
            </button>
        </div>

        <div class="table-responsive">
            <table id="tabla" class="table table-striped table-hover" style="width:100%">
                <thead class="table-dark">
                    <tr>
                        <th></th>
                        <th>Producto</th>
                        <th>Area</th>
                        <th>Sector</th>
                        <th>Cant. Pedida</th>
                        <th>Cant. Entregada</th>
                        <th>Fecha Entrega</th>
                        <th>N° Pedido</th>
                        <th>Visado</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
    </div>

<!-- Modal -->
<div class="modal fade" id="FormModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-dark text-white">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Producto</h1>
                <button type="button" class="btn-close bg-light" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body g-2">
                <input id="txtid" type="hidden" value="" />
                <input type="hidden" id="txtusuario" value="@Session["AccesCode"]" readonly>
                <input type="text" class="form-control" id="txtusuario" value="@User.Identity.Name" readonly>

                <div class="row g-2" id="contenedor">

                    <div class="col-sm-6">
                        <label class="form-label">Producto</label>
                        <select id="cbodetalle" class="form-select ProductosS">
                            <option value="">Seleccione un Producto</option>
                        </select>
                    </div>



                    <div id="contenedor" class="col-sm-6">
                        <p style="text-align:center">Filtros de busqueda</p>
                        @Html.Partial("_BusquedaAvan")
                    </div>





                    <div class="col-sm-6">
                        <label for="txtfechapedido" class="form-label">Fecha de Pedido</label>
                        <input type="text" class="form-control" id="txtfechapedido" >
                    </div>

                    <div class="col-sm-6">
                        <label for="txtpedido" class="form-label">N° de Pedido</label>
                        <input type="text" class="form-control" id="txtpedido" maxlength="15" readonly>
                    </div>

                    <div class="col-sm-6">
                        <label class="form-label">Área</label>
                        <input type="text" class="form-control"
                               id="txtArea"
                               value="@Session["NombreArea"]"
                               readonly>
                    </div>
                    <div class="col-sm-6">
                        <label class="form-label">Sector</label>
                        <input type="text" class="form-control"
                               id="txtSector"
                               value="@Session["NombreSector"]"
                               readonly>
                    </div>

                    <div class="col-sm-6">
                        <label for="txtcantidad" class="form-label">Cantidad</label>
                        <input type="number" class="form-control" id="txtcantidad" min="0" required placeholder="Coloque una cantidad" oninput="this.value.replace(/[^0-9]/g, '');">
                    </div>

                    <div class="col-sm-6">
                        <label for="txtcodigoid" class="form-label">Codigo ID</label>
                        <input type="text" class="form-control" id="txtcodigoid" maxlength="30">
                    </div>

                    <div class="col-sm-6">
                        <label for="txtobservaciones" class="form-label">Observaciones</label>
                        <input type="text" class="form-control" id="txtobservaciones" maxlength="50">
                    </div>
                </div>

                <div class="row mt-12">
                    <div class="col-12">
                        <div id="mensajeError" class="alert alert-danger" role="alert"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary btn-guardar">Guardar</button>
                <button class="btn btn-secondary btn-lg" onclick="imprimirPedido()" id="btnImprimir">
                    <i class="fas fa-print me-2"></i> Imprimir
                </button>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="userPermissionsJson" value="@Json.Encode(Session["PermissionsCode"])" />

@section scripts{
    <script>
        // Configuración Inicial
        var tabladata;
        var filaSeleccionada;
        var productos = {};
        var codigoidprod = {};
        var rubroprod = {};
        var tipoprod = {};
        var appSettings = {};
        const ID_RUBRO_INFORMATICA = 184;




        $(document).ready(function () {
            inicializarDataTable();


            var urlrubros = '@Url.Action("ListarRubros", "Toner")'
            CargarRubros(urlrubros);
           /* cargarProductos();*/
            var urlcodigoid = '@Url.Action("ListarProductos", "Toner")'
            CargarCodigosID(urlcodigoid);
            LimpiarSelects();
            CargarProductos();
            LimpiarCampos();
            selects2();
            cargarApiUrls();
            $('.btn-guardar').click(Guardar);
            editar();
        });

        function editar() {
            $("#tabla tbody").on("click", '.btn-editar', function () {
                var filaSeleccionada = $(this).closest("tr");
                var data = tabladata.row(filaSeleccionada).data();
                abrirModal(data);
            });
        }


        $(document).ready(function () {
        // Cargar áreas al cargar la página
        $.getJSON('@Url.Action("ObtenerAreas", "SolicitudPedidos")', function (data) {
            $.each(data, function (index, area) {
                $('#cboArea').append($('<option>', {
                    value: area.CodArea,
                    text: area.NombreArea
                }));
            });
        });

        // Al cambiar el área, cargar los sectores correspondientes
            $('#cboArea').change(function () {
            var codArea = $(this).val();
                $('#cboSector').empty(); // Limpiar sectores

            // Agregar opción "Todos"
                $('#cboSector').append($('<option>', {
                value: "0",
                text: "Todos"
            }));

            if (codArea) {
                $.getJSON('@Url.Action("ObtenerSectoresPorArea", "SolicitudPedidos")', { codArea: codArea }, function (data) {
                    $.each(data, function (index, sector) {
                        $('#cboSector').append($('<option>', {
                            value: sector.CodSector,
                            text: sector.Nombre
                        }));
                    });
                });
            }
        });
    });


        function aplicarFiltros() {
            const filtros = {
                codArea: $('#cboArea').val() || null,
                codSector: $('#cboSector').val() || null,
                fechaInicio: $('#txtFechaInicio').val() || null,
                fechaFin: $('#txtFechaFin').val() || null
            };

            tabladata.ajax.url('@Url.Action("ListarFiltrados", "SolicitudPedidos")?' + $.param(filtros)).load();
        }
               function inicializarDataTable() {
             tabladata = $('#tabla').DataTable({
                 ajax: {
                     url: '@Url.Action("ListarFiltrados", "SolicitudPedidos")',
                     data: function (d) {
                         // Tus parámetros de filtro existentes
                         d.codArea = $('#cboArea').val();
                         d.codSector = $('#cboSector').val();
                         d.fechaInicio = $('#txtFechaInicio').val();
                         d.fechaFin = $('#txtFechaFin').val();
                         d.nroPedido = $('#txtBuscarPedido').val();
                         d.soloPendientes = false; // Asegúrate de que el SP maneje esto correctamente
                     },
                     // Es buena práctica añadir manejo de errores AJAX
                     error: function (jqXHR, textStatus, errorThrown) {
                         console.error("Error al cargar datos para DataTable:", textStatus, errorThrown);
                         // Podrías mostrar un mensaje al usuario aquí
                         alert("Error al cargar la lista de pedidos. Verifique la conexión o contacte al administrador.");
                     }
                 },
                 columns: [
                     { data: "IdSolicitud", visible: false },
                     // Añadir columna IdProducto (puede ser invisible, ayuda a DataTables a mapear)
                     { data: "oProductos.IdProducto", visible: false }, // <-- AÑADIDO (opcional pero recomendado)
                     { data: "oProductos.Detalle", title: "Producto" },
                     { data: "NombreArea" },
                     { data: "NombreSector" },
                     { data: "CantidadPedida", title: "Cant. Pedida" },
                     {
                         data: "CantidadEntregada",
                         title: "Cant. Entregada",
                         render: function (data, type, row) {
                             // Acceder al IdProducto desde el objeto anidado 'oProductos'
                             // Se añade una comprobación por si oProductos fuera null inesperadamente
                             const idProducto = row.oProductos ? row.oProductos.IdProducto : '';

                             return `<input type="number" class="form-control input-entregado"
                                            data-id="${row.IdSolicitud}"
                                            data-idproducto="${idProducto}"  // <-- MODIFICADO: Añadido data-idproducto
                                            value="${data || 0}"
                                            min="0"
                                            max="${row.CantidadPedida}"
                                            ${row.Visado ? 'disabled' : ''}>`; // Se asume 'Visado' viene como booleano
                         }
                     },
                     {
                         data: "FechaPedido",
                         title: "Fecha Pedido",
                         render: function (data) {
                             // Tu formato de fecha en C# es "yyyy-MM-dd HH:mm:ss" que new Date() puede parsear.
                             // toLocaleDateString() lo mostrará en formato local.
                             return data ? new Date(data).toLocaleDateString() : '';
                         }
                     },
                     {
                         data: "FechaEntrega",
                         title: "Fecha Entrega",
                         render: function (data) {
                             // Tu formato de fecha en C# es "yyyy-MM-dd HH:mm:ss" que new Date() puede parsear.
                             // toLocaleDateString() lo mostrará en formato local.
                             return data ? new Date(data).toLocaleDateString() : 'Pendiente';
                         }
                     },
                     { data: "NroPedido", title: "N° Pedido" },
                     {
                         data: "Visado",
                         title: "Visado",
                         render: function (data) {
                             // Renderizar ícono basado en el valor booleano de Visado
                             return data ? '<i class="fas fa-check-circle text-success"></i>' :
                                            '<i class="fas fa-times-circle text-danger"></i>';
                         }
                     },
                     {
                         data: null, // Columna para botones de acción
                         render: function (data, type, row) {
                             // Solo mostrar botón editar si NO está visado (opcional)
                              if (row.Visado) {
                                  return ''; // O un botón deshabilitado
                              }
                             return '<button type="button" class="btn btn-primary btn-sm ms-2 btn-editar"> <i class="fas fa-edit"></i></button>';
                         },
                         orderable: false,
                         searchable: false,
                         width: "90px" // Ajusta según necesidad
                     }
                 ],
                 language: {
                     // URL para internacionalización en español
                     url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-ES.json'
                 },
                 // Otras opciones útiles de DataTables (opcional)
                  responsive: true, // Para adaptar a pantallas pequeñas
                  processing: true, // Muestra indicador de carga
                  serverSide: false // Asumiendo que ListarFiltrados devuelve toda la lista (client-side processing)
                                   // Si usas paginación/filtrado del lado del servidor, esto debe ser true y ajustar ajax.data
             });
            // Evento para actualizar cantidad entregada
                $('#tabla tbody').on('change', '.input-entregado', function () {
                    const idSolicitud = $(this).data('id');
                    const idProducto = $(this).data('idproducto'); // <-- OBTENER IdProducto
                    const cantidadEntregadaNueva = $(this).val();
                    const filaActual = $(this).closest('tr'); // Guardar referencia a la fila
                    const datosFila = tabladata.row(filaActual).data(); // Obtener datos originales de la fila

                    // --- Validación básica opcional en cliente (Buena UX) ---
                    if (parseInt(cantidadEntregadaNueva) < 0) {
                         Swal.fire('Error', 'La cantidad entregada no puede ser negativa.', 'warning');
                         $(this).val(datosFila.CantidadEntregada || 0); // Revertir al valor original
                         return;
                    }
                    if (parseInt(cantidadEntregadaNueva) > parseInt(datosFila.CantidadPedida)) {
                         Swal.fire('Error', 'La cantidad entregada no puede superar la cantidad pedida.', 'warning');
                         $(this).val(datosFila.CantidadEntregada || 0); // Revertir al valor original
                         return;
                    }
                    // --- Fin Validación Cliente ---


                    $.post('@Url.Action("ActualizarEntrega", "EntregaPedidos")', {
                        IdSolicitud: idSolicitud,
                        CantidadEntregada: cantidadEntregadaNueva,
                        IdProducto: idProducto // <-- ENVIAR IdProducto
                    }).done(function (response) {
                        if (response.resultado) {
                            Swal.fire('¡Éxito!', response.mensaje || 'Cantidad entregada actualizada.', 'success');
                            // Recargar la tabla o solo la fila para reflejar los cambios
                            tabladata.ajax.reload(null, false); // Recarga sin resetear paginación
                        } else {
                            Swal.fire('Error', response.mensaje, 'error');
                            // Revertir el valor en el input al original si hubo error en el servidor
                             $(this).val(datosFila.CantidadEntregada || 0);
                        }
                    }).fail(function (xhr) {
                        Swal.fire('Error', 'Ocurrió un error de conexión al actualizar.', 'error');
                         // Revertir el valor en el input al original si hubo error de conexión
                         $(this).val(datosFila.CantidadEntregada || 0);
                    });
                });
         }








                        // Función para buscar por número de pedido
                      function buscarPorNumero() {
                    const nroPedido = $("#txtBuscarPedido").val().trim(); // Obtener valor del input
                    tabladata.ajax.url('@Url.Action("ListarFiltradosNro", "SolicitudPedidos")' +
                        '?nroPedido=' + encodeURIComponent(nroPedido) +
                        '&soloPendientes=false').load(function(data) {
                            if (data.data.length === 0) {
                                Swal.fire('¡Atención!', 'No se encontraron pedidos con ese número.', 'info');
                            }
                        });
                }

                      



           function CargarProductos(callback) {
               $.ajax({
                   url: '@Url.Action("ListarProductos", "Toner")',
                   success: function(data) {
                       $("#cbodetalle").empty().append('<option value="">Seleccione producto</option>');
                       $.each(data.data, function(_, producto) {
                           if (producto.Activo) {
                               $("#cbodetalle").append(
                                   $('<option></option>')
                                       .val(producto.IdProducto)
                                       .text(producto.Detalle)
                               );
                           }
                       });
                       if (typeof callback === "function") callback();
                   }
               });
           }

            function CargarRubros(urlrubros) { // urlrubros es '@Url.Action("ListarRubros", "Toner")'
            var permissionsJson = $('#userPermissionsJson').val();
            var permissions = permissionsJson ? JSON.parse(permissionsJson) : [];

            // Determinar permisos relevantes
            var tienePermisoGeneral = permissions.some(p => p.Accesos == 24);
            var tienePermisoInformatica = permissions.some(p => p.Accesos == 184);

            var filterRubroId = null;
            var disableRubroSelect = false;

            // Aplicar filtro solo si NO tiene permiso general PERO SÍ el de informática
            if (!tienePermisoGeneral && tienePermisoInformatica) {
                filterRubroId = ID_RUBRO_INFORMATICA; // Usa la constante definida
                disableRubroSelect = true; // Se deshabilitará el combo
            }

            // Construir la URL para el AJAX call, añadiendo el parámetro si es necesario
            var ajaxUrl = urlrubros;
            if (filterRubroId !== null) {
                // Añadir parámetro a la URL (asegúrate que la URL base no tenga ya parámetros)
                ajaxUrl += (ajaxUrl.indexOf('?') > -1 ? '&' : '?') + 'allowedRubroId=' + filterRubroId;
            }

            $.ajax({
                url: ajaxUrl,
                type: "GET",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (response) { // Cambiado a response para claridad
                    var $cboRubro = $("#cborubro"); // ID del select de Rubros en _BusquedaAvan
                    if (!$cboRubro.length) {
                         console.error("Elemento #cborubro no encontrado en _BusquedaAvan.cshtml");
                         return; // Salir si el elemento no existe
                    }
                    $cboRubro.empty(); // Limpiar opciones previas

                    // Añadir opción por defecto solo si no está deshabilitado o hay más de una opción
                    if (!disableRubroSelect || (response.data && response.data.length !== 1)) {
                        $("<option>").attr({ "value": "" }).text("Seleccione un Rubro").appendTo($cboRubro);
                    }

                    // Poblar con los rubros recibidos
                    if (response.data) {
                        $.each(response.data, function (index, rubro) {
                             // Asumiendo que 'rubro' tiene propiedades 'IdRubro' y 'Rubro'
                            // Puedes añadir un check 'rubro.Activo' si existe
                            $("<option>").attr({ "value": rubro.IdRubro }).text(rubro.Rubro).appendTo($cboRubro);
                        });
                    }

                    // Ajustar estado del select y cargar tipos si está restringido/deshabilitado
                    if (disableRubroSelect && filterRubroId !== null) {
                        $cboRubro.val(filterRubroId); // Seleccionar el único rubro
                        $cboRubro.prop('disabled', true); // Deshabilitar
                        CargarTipos(filterRubroId); // Cargar tipos automáticamente para el rubro fijo
                    } else {
                        $cboRubro.prop('disabled', false); // Habilitar si no está restringido
                         // Limpiar dependientes si no hay selección automática
                         $("#cbotipo").empty().append($("<option>").attr({ "value": "" }).text("Seleccione un Tipo"));
                         $("#cbodetalle").empty().append($("<option>").attr({ "value": "" }).text("Seleccione un Producto"));
                    }
                },
                error: function (error) {
                    console.log("Error cargando Rubros: ", error);
                    // Mostrar mensaje de error al usuario si es apropiado
                    $("#mensajeError").text("Error al cargar rubros para búsqueda.").show().delay(5000).fadeOut();
                }
            });

             // Limpiar campos relacionados que podrían existir en _BusquedaAvan
             $("#cbostockactual").empty(); // Si existe
             $("#cbocodigo").empty().append($("<option>").attr({ "value": "" }).text("Seleccione Código ID")); // Si existe

        }


       


        $("#txtfechapedido").datepicker({
            dateFormat: 'dd/mm/yy',
            minDate: -7, // 7 días atrás
            maxDate: +7  // 7 días adelante
        });


        function abrirModal(data) {
             CargarProductos(function() { // Cargar productos antes de continuar
                 $('#txtArea').val('@Session["NombreArea"]');
                 $('#txtSector').val('@Session["NombreSector"]');
                 $("#txtid").val(0);
                 $("#txtcantidad").val("");
                 $("#txtobservaciones").val("");
                 $("#txtusuario").val('@Session["AccesCode"]');
                 $("#mensajeError").hide();

                 // Resetear campos
                 $("#cbodetalle").val("").prop("disabled", false);
                 $("#txtfechapedido").prop("disabled", false);

                 // Fecha actual para nuevos pedidos
                 const fechaActual = new Date();
                 $("#txtfechapedido").val($.datepicker.formatDate('dd/mm/yy', fechaActual));

                 if (data != null) {
                     // Cargar datos para edición
                     $("#txtid").val(data.IdSolicitud);
                     $("#txtcantidad").val(data.CantidadPedida);
                     $("#txtobservaciones").val(data.Observaciones);
                     $("#txtpedido").val(data.NroPedido);

                     // Establecer y bloquear producto seleccionado
                     $("#cbodetalle")
                         .val(data.oProductos.IdProducto)
                         .prop("disabled", true)
                         .trigger('change'); // Forzar actualización visual

                     // Manejo de fecha
                     const fechaPedido = new Date(data.FechaPedido);
                     if (!isNaN(fechaPedido.getTime())) {
                         $("#txtfechapedido").val($.datepicker.formatDate('dd/mm/yy', fechaPedido));
                     } else {
                         console.error("Fecha inválida:", data.FechaPedido);
                         $("#txtfechapedido").val("");
                     }

                     // Bloquear fecha en edición
                     $("#txtfechapedido").prop("disabled", true);

                     // Verificar si el número de pedido es válido
                     if (data.NroPedido && data.NroPedido !== "0") { // Asegurarse de que NroPedido no sea nulo o vacío
                         $("#btnGuardar").text("Actualizar");
                         $("#exampleModalLabel").text("Modificar Pedido");
                         $("#btnImprimir").prop("disabled", false); // Habilitar el botón de imprimir
                     } else {
                         $("#btnGuardar").text("Guardar");
                         $("#exampleModalLabel").text("Nuevo Pedido");
                         $("#cbodetalle").prop("disabled", false); // Habilitar el select para nuevo pedido
                         $("#btnImprimir").prop("disabled", true); // Deshabilitar el botón de imprimir
                     }
                 } else {
                     // Nuevo pedido
                     $.ajax({
                         url: '@Url.Action("GenerarNumeroPedido", "SolicitudPedidos")',
                         success: function(response) {
                             $("#txtpedido").val(response);
                         }
                     });
                     $("#btnGuardar").text("Guardar");
                     $("#exampleModalLabel").text("Nuevo Pedido");
                     $("#btnImprimir").prop("disabled", true); // Deshabilitar el botón de imprimir
                 }

                 $("#FormModal").modal("show");
             });
         }


        // Modificar la función Guardar para incluir código ID
        function Guardar() {
            if ($("#cbodetalle").val() === "") {
                mostrarError("¡Seleccione un producto!");
                return;
            }

            const pedidoData = {
                IdSolicitud: $("#txtid").val(),
                oProductos: {
                    IdProducto: $("#cbodetalle").val(),
                    CodigoId: $("#txtcodigoid").val() // Nuevo campo
                },
                CantidadPedida: $("#txtcantidad").val(),
                Observaciones: $("#txtobservaciones").val(),
                NroPedido: $("#txtpedido").val(),
                IdUsuarioEntrega: $("#txtusuario").val(),
            };

            $.ajax({
                url: '@Url.Action("GuardarPedidos", "SolicitudPedidos")',
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({ objeto: pedidoData }),
                success: function(response) {
                    if (response.resultado) {
                        Swal.fire('¡Éxito!', response.mensaje, 'success');
                        tabladata.ajax.reload();
                        $("#FormModal").modal("hide");
                    } else {
                        mostrarError(response.mensaje);
                    }
                }
            });
        }

        function mostrarError(mensaje) {
            $("#mensajeError").text(mensaje).show().delay(5000).fadeOut();
        }







    </script>





}


